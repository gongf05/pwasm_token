{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[15912867191166871790,4594067214802037904]},"crate_root":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src","external_crates":[{"file_name":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6894298996120199587,12678752264247089934]}}],"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":100024,"line_start":1,"line_end":3198,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":100024,"line_start":1,"line_end":3198,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":28},{"krate":0,"index":232},{"krate":0,"index":260},{"krate":0,"index":258},{"krate":0,"index":254},{"krate":0,"index":250},{"krate":0,"index":246},{"krate":0,"index":242},{"krate":0,"index":238},{"krate":0,"index":234},{"krate":0,"index":126},{"krate":0,"index":130},{"krate":0,"index":264},{"krate":0,"index":292},{"krate":0,"index":290},{"krate":0,"index":286},{"krate":0,"index":282},{"krate":0,"index":278},{"krate":0,"index":274},{"krate":0,"index":270},{"krate":0,"index":266},{"krate":0,"index":132},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":192}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either [big-endian or little-endian order].","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2171,"byte_end":2193,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2228,"byte_end":2235,"line_start":65,"line_end":65,"column_start":35,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4374,"byte_end":4380,"line_start":172,"line_end":172,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5628,"byte_end":5637,"line_start":212,"line_end":212,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5872,"byte_end":5880,"line_start":221,"line_end":221,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6389,"byte_end":6397,"line_start":240,"line_end":240,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6930,"byte_end":6938,"line_start":261,"line_end":261,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7425,"byte_end":7433,"line_start":280,"line_end":280,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8508,"byte_end":8517,"line_start":320,"line_end":320,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9629,"byte_end":9638,"line_start":360,"line_end":360,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10155,"byte_end":10164,"line_start":379,"line_end":379,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10709,"byte_end":10718,"line_start":400,"line_end":400,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11213,"byte_end":11222,"line_start":419,"line_end":419,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12352,"byte_end":12362,"line_start":459,"line_end":459,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13528,"byte_end":13536,"line_start":500,"line_end":500,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14100,"byte_end":14108,"line_start":522,"line_end":522,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14653,"byte_end":14661,"line_start":544,"line_end":544,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15211,"byte_end":15219,"line_start":566,"line_end":566,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16411,"byte_end":16419,"line_start":612,"line_end":612,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17717,"byte_end":17725,"line_start":659,"line_end":659,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18345,"byte_end":18353,"line_start":682,"line_end":682,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18926,"byte_end":18935,"line_start":704,"line_end":704,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19511,"byte_end":19520,"line_start":726,"line_end":726,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20077,"byte_end":20086,"line_start":748,"line_end":748,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20648,"byte_end":20657,"line_start":770,"line_end":770,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21912,"byte_end":21921,"line_start":816,"line_end":816,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23284,"byte_end":23293,"line_start":863,"line_end":863,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23942,"byte_end":23951,"line_start":887,"line_end":887,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24726,"byte_end":24739,"line_start":913,"line_end":913,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"fn (src: &[u8], dst: &mut [u16]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25419,"byte_end":25432,"line_start":936,"line_end":936,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26112,"byte_end":26125,"line_start":959,"line_end":959,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27543,"byte_end":27556,"line_start":1007,"line_end":1007,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"fn (src: &[u8], dst: &mut [i16]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28410,"byte_end":28423,"line_start":1036,"line_end":1036,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"fn (src: &[u8], dst: &mut [i32]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29278,"byte_end":29291,"line_start":1065,"line_end":1065,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"fn (src: &[u8], dst: &mut [i64]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31118,"byte_end":31141,"line_start":1125,"line_end":1125,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32062,"byte_end":32085,"line_start":1155,"line_end":1155,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32928,"byte_end":32942,"line_start":1183,"line_end":1183,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"fn (src: &[u16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33623,"byte_end":33637,"line_start":1206,"line_end":1206,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"fn (src: &[u32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34318,"byte_end":34332,"line_start":1229,"line_end":1229,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"fn (src: &[u64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35741,"byte_end":35755,"line_start":1276,"line_end":1276,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"fn (src: &[i16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36592,"byte_end":36606,"line_start":1304,"line_end":1304,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"fn (src: &[i32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37443,"byte_end":37457,"line_start":1332,"line_end":1332,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"fn (src: &[i64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39280,"byte_end":39294,"line_start":1392,"line_end":1392,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"fn (src: &[f32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40228,"byte_end":40242,"line_start":1423,"line_end":1423,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"fn (src: &[f64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41113,"byte_end":41127,"line_start":1451,"line_end":1451,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"fn (numbers: &mut [u16]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41832,"byte_end":41846,"line_start":1474,"line_end":1474,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"fn (numbers: &mut [u32]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42551,"byte_end":42565,"line_start":1497,"line_end":1497,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"fn (numbers: &mut [u64]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44075,"byte_end":44089,"line_start":1547,"line_end":1547,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"fn (src: &mut [i16]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44957,"byte_end":44971,"line_start":1576,"line_end":1576,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"fn (src: &mut [i32]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45839,"byte_end":45853,"line_start":1605,"line_end":1605,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"fn (src: &mut [i64]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47232,"byte_end":47246,"line_start":1649,"line_end":1649,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"fn (numbers: &mut [f32]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47516,"byte_end":47530,"line_start":1656,"line_end":1656,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"fn (numbers: &mut [f64]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":232},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48041,"byte_end":48050,"line_start":1676,"line_end":1676,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48032,"byte_end":48053,"line_start":1676,"line_end":1676,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48032,"byte_end":48053,"line_start":1676,"line_end":1676,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48249,"byte_end":48251,"line_start":1687,"line_end":1687,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48766,"byte_end":48778,"line_start":1706,"line_end":1706,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48757,"byte_end":48781,"line_start":1706,"line_end":1706,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48757,"byte_end":48781,"line_start":1706,"line_end":1706,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48995,"byte_end":48997,"line_start":1717,"line_end":1717,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49724,"byte_end":49737,"line_start":1743,"line_end":1743,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50051,"byte_end":50063,"line_start":1754,"line_end":1754,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50009,"byte_end":50041,"line_start":1753,"line_end":1753,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4410,"byte_end":4422,"line_start":173,"line_end":173,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4453,"byte_end":4462,"line_start":174,"line_end":174,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48072,"byte_end":48081,"line_start":1678,"line_end":1678,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48800,"byte_end":48812,"line_start":1708,"line_end":1708,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52304,"byte_end":52313,"line_start":1834,"line_end":1834,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58033,"byte_end":58045,"line_start":2049,"line_end":2049,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4410,"byte_end":4422,"line_start":173,"line_end":173,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":264},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4453,"byte_end":4462,"line_start":174,"line_end":174,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":232},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5644,"byte_end":5649,"line_start":213,"line_end":213,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2472},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5652,"byte_end":5656,"line_start":213,"line_end":213,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":1732},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5659,"byte_end":5664,"line_start":213,"line_end":213,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":7416},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5667,"byte_end":5674,"line_start":213,"line_end":213,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2484},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5677,"byte_end":5679,"line_start":213,"line_end":213,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2290},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5682,"byte_end":5686,"line_start":213,"line_end":213,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":6992},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5689,"byte_end":5692,"line_start":213,"line_end":213,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":2320},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5695,"byte_end":5704,"line_start":213,"line_end":213,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":1,"index":2284},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5707,"byte_end":5717,"line_start":213,"line_end":213,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":1,"index":2338},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5733,"byte_end":5739,"line_start":214,"line_end":214,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":22},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48072,"byte_end":48081,"line_start":1678,"line_end":1678,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":232},"to":{"krate":1,"index":2484}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48800,"byte_end":48812,"line_start":1708,"line_end":1708,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":264},"to":{"krate":1,"index":2484}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52304,"byte_end":52313,"line_start":1834,"line_end":1834,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":232},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58033,"byte_end":58045,"line_start":2049,"line_end":2049,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":264},"to":{"krate":0,"index":28}}]}