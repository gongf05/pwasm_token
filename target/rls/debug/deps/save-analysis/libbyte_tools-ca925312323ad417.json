{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"byte_tools","disambiguator":[17059511958215878000,5270337393210983347]},"crate_root":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-tools-0.2.0/src","external_crates":[{"file_name":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-tools-0.2.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6894298996120199587,12678752264247089934]}}],"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":733,"line_start":1,"line_end":37,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":117,"byte_end":118,"line_start":9,"line_end":9,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":142,"byte_end":143,"line_start":10,"line_end":10,"column_start":23,"column_end":24},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":165,"byte_end":166,"line_start":11,"line_end":11,"column_start":21,"column_end":22},"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":189,"byte_end":190,"line_start":12,"line_end":12,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":733,"line_start":1,"line_end":37,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-tools-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":26},{"krate":0,"index":44},{"krate":0,"index":58},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,105,110,103,108,101,46,114,115],"byte_start":1254,"byte_end":1265,"line_start":18,"line_end":18,"column_start":8,"column_end":19},"name":"read_u32_le","qualname":"::read_single::read_u32_le","value":"fn (src: &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Read the value of a vector of bytes as a u32 value in little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,105,110,103,108,101,46,114,115],"byte_start":1237,"byte_end":1246,"line_start":17,"line_end":17,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,105,110,103,108,101,46,114,115],"byte_start":1421,"byte_end":1432,"line_start":24,"line_end":24,"column_start":8,"column_end":19},"name":"read_u32_be","qualname":"::read_single::read_u32_be","value":"fn (src: &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Read the value of a vector of bytes as a u32 value in big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,105,110,103,108,101,46,114,115],"byte_start":1404,"byte_end":1413,"line_start":23,"line_end":23,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,105,110,103,108,101,46,114,115],"byte_start":1591,"byte_end":1602,"line_start":30,"line_end":30,"column_start":8,"column_end":19},"name":"read_u64_le","qualname":"::read_single::read_u64_le","value":"fn (src: &[u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Read the value of a vector of bytes as a u64 value in little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,105,110,103,108,101,46,114,115],"byte_start":1574,"byte_end":1583,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,105,110,103,108,101,46,114,115],"byte_start":1758,"byte_end":1769,"line_start":36,"line_end":36,"column_start":8,"column_end":19},"name":"read_u64_be","qualname":"::read_single::read_u64_be","value":"fn (src: &[u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Read the value of a vector of bytes as a u64 value in big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,105,110,103,108,101,46,114,115],"byte_start":1741,"byte_end":1750,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,105,110,103,108,101,46,114,115],"byte_start":2295,"byte_end":2307,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"write_u32_le","qualname":"::write_single::write_u32_le","value":"fn (dst: &mut [u8], n: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a u32 into a vector, which must be 4 bytes long. The value is written\n in little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,105,110,103,108,101,46,114,115],"byte_start":2278,"byte_end":2287,"line_start":15,"line_end":15,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,105,110,103,108,101,46,114,115],"byte_start":2497,"byte_end":2509,"line_start":23,"line_end":23,"column_start":8,"column_end":20},"name":"write_u32_be","qualname":"::write_single::write_u32_be","value":"fn (dst: &mut [u8], n: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a u32 into a vector, which must be 4 bytes long. The value is written\n in big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,105,110,103,108,101,46,114,115],"byte_start":2480,"byte_end":2489,"line_start":22,"line_end":22,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,105,110,103,108,101,46,114,115],"byte_start":2702,"byte_end":2714,"line_start":30,"line_end":30,"column_start":8,"column_end":20},"name":"write_u64_le","qualname":"::write_single::write_u64_le","value":"fn (dst: &mut [u8], n: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a u64 into a vector, which must be 8 bytes long. The value is written\n in little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,105,110,103,108,101,46,114,115],"byte_start":2685,"byte_end":2694,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,105,110,103,108,101,46,114,115],"byte_start":2904,"byte_end":2916,"line_start":37,"line_end":37,"column_start":8,"column_end":20},"name":"write_u64_be","qualname":"::write_single::write_u64_be","value":"fn (dst: &mut [u8], n: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a u64 into a vector, which must be 8 bytes long. The value is written\n in big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,105,110,103,108,101,46,114,115],"byte_start":2887,"byte_end":2896,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,108,105,99,101,46,114,115],"byte_start":3506,"byte_end":3518,"line_start":21,"line_end":21,"column_start":8,"column_end":20},"name":"read_u32v_le","qualname":"::read_slice::read_u32v_le","value":"fn (dst: &mut [u32], src: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Read a vector of bytes into a vector of u32s. The values are read in\n little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,108,105,99,101,46,114,115],"byte_start":3489,"byte_end":3498,"line_start":20,"line_end":20,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,108,105,99,101,46,114,115],"byte_start":3703,"byte_end":3715,"line_start":28,"line_end":28,"column_start":8,"column_end":20},"name":"read_u32v_be","qualname":"::read_slice::read_u32v_be","value":"fn (dst: &mut [u32], src: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Read a vector of bytes into a vector of u32s. The values are read in\n big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,108,105,99,101,46,114,115],"byte_start":3686,"byte_end":3695,"line_start":27,"line_end":27,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,108,105,99,101,46,114,115],"byte_start":3903,"byte_end":3915,"line_start":35,"line_end":35,"column_start":8,"column_end":20},"name":"read_u64v_le","qualname":"::read_slice::read_u64v_le","value":"fn (dst: &mut [u64], src: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Read a vector of bytes into a vector of u64s. The values are read in\n little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,108,105,99,101,46,114,115],"byte_start":3886,"byte_end":3895,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,108,105,99,101,46,114,115],"byte_start":4100,"byte_end":4112,"line_start":42,"line_end":42,"column_start":8,"column_end":20},"name":"read_u64v_be","qualname":"::read_slice::read_u64v_be","value":"fn (dst: &mut [u64], src: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Read a vector of bytes into a vector of u64s. The values are read in\n big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,114,101,97,100,95,115,108,105,99,101,46,114,115],"byte_start":4083,"byte_end":4092,"line_start":41,"line_end":41,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,108,105,99,101,46,114,115],"byte_start":4859,"byte_end":4872,"line_start":23,"line_end":23,"column_start":8,"column_end":21},"name":"write_u32v_le","qualname":"::write_slice::write_u32v_le","value":"fn (dst: &mut [u8], src: &[u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a vector of u32s into a vector of bytes. The values are written in\n little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,108,105,99,101,46,114,115],"byte_start":4842,"byte_end":4851,"line_start":22,"line_end":22,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,108,105,99,101,46,114,115],"byte_start":5067,"byte_end":5080,"line_start":30,"line_end":30,"column_start":8,"column_end":21},"name":"write_u32v_be","qualname":"::write_slice::write_u32v_be","value":"fn (dst: &mut [u8], src: &[u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a vector of u32s into a vector of bytes. The values are written in\n big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,108,105,99,101,46,114,115],"byte_start":5050,"byte_end":5059,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,108,105,99,101,46,114,115],"byte_start":5278,"byte_end":5291,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"write_u64v_le","qualname":"::write_slice::write_u64v_le","value":"fn (dst: &mut [u8], src: &[u64]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a vector of u64s into a vector of bytes. The values are written in\n little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,108,105,99,101,46,114,115],"byte_start":5261,"byte_end":5270,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,108,105,99,101,46,114,115],"byte_start":5489,"byte_end":5502,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"write_u64v_be","qualname":"::write_slice::write_u64v_be","value":"fn (dst: &mut [u8], src: &[u64]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write a vector of u64s into a vector of bytes. The values are written in\n little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,119,114,105,116,101,95,115,108,105,99,101,46,114,115],"byte_start":5472,"byte_end":5481,"line_start":43,"line_end":43,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":242,"byte_end":253,"line_start":16,"line_end":16,"column_start":8,"column_end":19},"name":"copy_memory","qualname":"::copy_memory","value":"fn (src: &[u8], dst: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copy bytes from src to dest\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":225,"byte_end":234,"line_start":15,"line_end":15,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":513,"byte_end":517,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"zero","qualname":"::zero","value":"fn (dst: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Zero all bytes in dst\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":496,"byte_end":505,"line_start":26,"line_end":26,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":618,"byte_end":621,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"set","qualname":"::set","value":"fn (dst: &mut [u8], value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets all bytes in `dst` equal to `value`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,45,116,111,111,108,115,45,48,46,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":601,"byte_end":610,"line_start":32,"line_end":32,"column_start":1,"column_end":10}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}