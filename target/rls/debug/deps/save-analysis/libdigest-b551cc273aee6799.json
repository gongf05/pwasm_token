{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"digest","disambiguator":[93147099204081984,11598442797997207686]},"crate_root":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.2/src","external_crates":[{"file_name":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6894298996120199587,12678752264247089934]}},{"file_name":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.2/src/lib.rs","num":2,"id":{"name":"generic_array","disambiguator":[14215685445901952644,10146822136311301172]}},{"file_name":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.2/src/lib.rs","num":3,"id":{"name":"typenum","disambiguator":[17416165609337640191,17748180514659399714]}}],"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":3530,"line_start":1,"line_end":96,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":505,"byte_end":511,"line_start":18,"line_end":18,"column_start":17,"column_end":23},"name":"Digest","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":3530,"line_start":1,"line_end":96,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/fancy/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":14},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":78},{"krate":0,"index":110},{"krate":0,"index":108},{"krate":0,"index":104},{"krate":0,"index":100},{"krate":0,"index":96},{"krate":0,"index":92},{"krate":0,"index":88},{"krate":0,"index":84},{"krate":0,"index":80},{"krate":0,"index":58},{"krate":0,"index":66},{"krate":0,"index":70},{"krate":0,"index":76}],"decl_id":null,"docs":" This crate provides traits for describing funcionality of cryptographic hash\n functions.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":307,"byte_end":314,"line_start":7,"line_end":7,"column_start":35,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":3926,"byte_end":3932,"line_start":12,"line_end":12,"column_start":11,"column_end":17},"name":"Digest","qualname":"::digest::Digest","value":"Digest: Input + BlockInput + FixedOutput + Default","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38}],"decl_id":null,"docs":" The `Digest` trait specifies an interface common for digest functions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4021,"byte_end":4024,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"new","qualname":"::digest::Digest::new","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The `Digest` trait specifies an interface common for digest functions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4180,"byte_end":4185,"line_start":20,"line_end":20,"column_start":8,"column_end":13},"name":"input","qualname":"::digest::Digest::input","value":"fn (&mut self, input: &[u8]) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The `Digest` trait specifies an interface common for digest functions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4330,"byte_end":4336,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"name":"result","qualname":"::digest::Digest::result","value":"fn (self) -> Output<Self::OutputSize>","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The `Digest` trait specifies an interface common for digest functions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4692,"byte_end":4698,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"digest","qualname":"::digest::Digest::digest","value":"fn (data: &[u8]) -> Output<Self::OutputSize>","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The `Digest` trait specifies an interface common for digest functions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4994,"byte_end":5004,"line_start":47,"line_end":47,"column_start":8,"column_end":18},"name":"digest_str","qualname":"::digest::Digest::digest_str","value":"fn (str: &str) -> Output<Self::OutputSize>","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The `Digest` trait specifies an interface common for digest functions.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":682,"byte_end":687,"line_start":24,"line_end":24,"column_start":11,"column_end":16},"name":"Input","qualname":"::Input","value":"Input","parent":null,"children":[{"krate":0,"index":46}],"decl_id":null,"docs":" Trait for processing input data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":802,"byte_end":809,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"process","qualname":"::Input::process","value":"fn (&mut self, input: &[u8]) -> ()","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Trait for processing input data\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1005,"byte_end":1015,"line_start":32,"line_end":32,"column_start":11,"column_end":21},"name":"BlockInput","qualname":"::BlockInput","value":"BlockInput","parent":null,"children":[{"krate":0,"index":50}],"decl_id":null,"docs":" Trait to indicate that digest function processes data in blocks of size\n `BlockSize`. Main usage of this trait is for implementing HMAC generically.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1027,"byte_end":1036,"line_start":33,"line_end":33,"column_start":10,"column_end":19},"name":"BlockSize","qualname":"::BlockInput::BlockSize","value":"type BlockSize: ArrayLength<u8>;","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1126,"byte_end":1137,"line_start":37,"line_end":37,"column_start":11,"column_end":22},"name":"FixedOutput","qualname":"::FixedOutput","value":"FixedOutput","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":56}],"decl_id":null,"docs":" Trait for returning digest result with the fixed size\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1149,"byte_end":1159,"line_start":38,"line_end":38,"column_start":10,"column_end":20},"name":"OutputSize","qualname":"::FixedOutput::OutputSize","value":"type OutputSize: ArrayLength<u8>;","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1260,"byte_end":1272,"line_start":41,"line_end":41,"column_start":8,"column_end":20},"name":"fixed_result","qualname":"::FixedOutput::fixed_result","value":"fn (self) -> GenericArray<u8, Self::OutputSize>","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Trait for returning digest result with the fixed size\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1455,"byte_end":1468,"line_start":46,"line_end":46,"column_start":12,"column_end":25},"name":"InvalidLength","qualname":"::InvalidLength","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type for variable digest output\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1444,"byte_end":1469,"line_start":46,"line_end":46,"column_start":1,"column_end":26}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1444,"byte_end":1469,"line_start":46,"line_end":46,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1542,"byte_end":1556,"line_start":49,"line_end":49,"column_start":11,"column_end":25},"name":"VariableOutput","qualname":"::VariableOutput","value":"VariableOutput: core::marker::Sized","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64}],"decl_id":null,"docs":" Trait for returning digest result with the varaible size\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1813,"byte_end":1816,"line_start":53,"line_end":53,"column_start":8,"column_end":11},"name":"new","qualname":"::VariableOutput::new","value":"fn (output_size: usize) -> Result<Self, InvalidLength>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Trait for returning digest result with the varaible size\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1953,"byte_end":1964,"line_start":56,"line_end":56,"column_start":8,"column_end":19},"name":"output_size","qualname":"::VariableOutput::output_size","value":"fn (&self) -> usize","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Trait for returning digest result with the varaible size\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2191,"byte_end":2206,"line_start":61,"line_end":61,"column_start":8,"column_end":23},"name":"variable_result","qualname":"::VariableOutput::variable_result","value":"fn (self, buffer: &mut [u8]) -> Result<&[u8], InvalidLength>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Trait for returning digest result with the varaible size\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2401,"byte_end":2410,"line_start":66,"line_end":66,"column_start":11,"column_end":20},"name":"XofReader","qualname":"::XofReader","value":"XofReader","parent":null,"children":[{"krate":0,"index":68}],"decl_id":null,"docs":" Trait for decribing readers which are used to extract extendable output\n from the resulting state of hash function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2500,"byte_end":2504,"line_start":68,"line_end":68,"column_start":8,"column_end":12},"name":"read","qualname":"::XofReader::read","value":"fn (&mut self, buffer: &mut [u8]) -> ()","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" Trait for decribing readers which are used to extract extendable output\n from the resulting state of hash function.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2749,"byte_end":2765,"line_start":74,"line_end":74,"column_start":11,"column_end":27},"name":"ExtendableOutput","qualname":"::ExtendableOutput","value":"ExtendableOutput","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74}],"decl_id":null,"docs":" Trait which describes extendable output (XOF) of hash functions. Using this\n trait you first need to get structure which implements `XofReader`, using\n which you can read extendable output.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2777,"byte_end":2783,"line_start":75,"line_end":75,"column_start":10,"column_end":16},"name":"Reader","qualname":"::ExtendableOutput::Reader","value":"type Reader: XofReader;","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2857,"byte_end":2867,"line_start":78,"line_end":78,"column_start":8,"column_end":18},"name":"xof_result","qualname":"::ExtendableOutput::xof_result","value":"fn (self) -> Self::Reader","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Trait which describes extendable output (XOF) of hash functions. Using this\n trait you first need to get structure which implements `XofReader`, using\n which you can read extendable output.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":6074,"byte_end":6075,"line_start":85,"line_end":85,"column_start":64,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":3934,"byte_end":3939,"line_start":12,"line_end":12,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":44},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":3942,"byte_end":3952,"line_start":12,"line_end":12,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":48},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":3955,"byte_end":3966,"line_start":12,"line_end":12,"column_start":40,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":52},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":3969,"byte_end":3976,"line_start":12,"line_end":12,"column_start":54,"column_end":61},"kind":"SuperTrait","from":{"krate":1,"index":2484},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":6074,"byte_end":6075,"line_start":85,"line_end":85,"column_start":64,"column_end":65},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":21},"to":{"krate":0,"index":28}},{"span":{"file_name":[47,85,115,101,114,115,47,102,97,110,99,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1572,"byte_end":1577,"line_start":49,"line_end":49,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":1728},"to":{"krate":0,"index":58}}]}